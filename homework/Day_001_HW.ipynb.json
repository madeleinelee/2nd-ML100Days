In [1]: #作業1：
   ...: #請上 Kaggle, 在 Competitions 或 Dataset 中找一組競賽或資料並寫下：--> Titanic: Machine Learning from Disaster
   ...: #1. 你選的這組資料為何重要：--> 生存預測及變數相關性
   ...: #2. 資料從何而來 (tips: 譬如提供者是誰、以什麼方式蒐集) ：--> Kaggle 從實際Ｔitanic事件中的資料
   ...: #3. 蒐集而來的資料型態為何 ：--> ＣＳＶ, 文字, 日期, 時間, 數字, 布林
   ...: #4. 這組資料想解決的問題如何評估 ：--> Ａaccuracy 準確率
   ...: 
   ...: #作業2：
   ...: #想像你經營一個自由載客車隊，你希望能透過數據分析以提升業績，請你思考並描述你如何規劃整體的分析/解決方案：
   ...: #1. 核心問題為何 (tips：如何定義 「提升業績 & 你的假設」) ：--> 平均所有車次的最大載客量
   ...: #2. 資料從何而來 (tips：哪些資料可能會對你想問的問題產生影響 & 資料如何蒐集) ：--> GPS上下車紀錄及駕駛, 乘客,金額, 時間, 日期
   ...: #3. 蒐集而來的資料型態為何 ：--> 座標軸, 數字, 日期, 時間, 文字
   ...: #4. 你要回答的問題，其如何評估 (tips：你的假設如何驗證)# ：--> F score
   ...: 

In [2]: #作業3：
   ...: #請點選下方檢視範例依照 Day_001_example_of_metrics.ipynb 完成 Mean Squared Error 的函式
   ...: #資料夾結構建立規則提醒：2nd-ML100Days > data資料夾 & homework資料夾 (ipynb檔) 
   ...: #(請注意data的存放位置，建議放在*.ipynb 同一個目錄下，這樣才能在不修改code的情況下正常執行)
    # 載入基礎套件與代稱
import numpy as np
import matplotlib.pyplot as pl

# 定義 mean_squared_error 這個函數, 計算並傳回 MSE
def mean_squared_error():
    # 與範例相同, 不另外解說
w = 3
b = 0.5
x_lin = np.linspace(0, 100, 101)
y = (x_lin + np.random.randn(101) * 5) * w + b

plt.plot(x_lin, y, 'b.', label = 'data points')
plt.title("Assume we have data points")
plt.legend(loc = 2)
plt.show()

# 與範例相同, 不另外解說
y_hat = x_lin * w + b
plt.plot(x_lin, y, 'b.', label = 'data')
plt.plot(x_lin, y_hat, 'r-', label = 'prediction')
plt.title("Assume we have data points (And the prediction)")
plt.legend(loc = 2)
plt.show()
# 執行 Function, 確認有沒有正常執行
MSE = mean_squared_error(y, y_hat)
MAE = mean_absolute_error(y, y_hat)
print("The Mean squared error is %.3f" % (MSE))
print("The Mean absolute error is %.3f" % (MAE) # 載入基礎套件與代稱